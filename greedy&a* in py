import heapq

def greedy_search(graph, heuristic, start, goal):
    visited = set()
    queue = [(heuristic[start], start)]  # Priority queue based on heuristic
    path = []

    while queue:
        _, node = heapq.heappop(queue)
        if node in visited: continue
        path.append(node)
        if node == goal: return path
        visited.add(node)
        for neighbor, cost in graph[node]:
            if neighbor not in visited:
                heapq.heappush(queue, (heuristic[neighbor], neighbor))
    return "No path found"

def a_star(graph, heuristic, start, goal):
    visited = set()
    queue = [(heuristic[start], 0, start)]  # (f_score, g_score, node)
    came_from = {}
    g_score = {start: 0}

    while queue:
        _, g, node = heapq.heappop(queue)
        if node == goal:
            path = []
            while node in came_from:
                path.append(node)
                node = came_from[node]
            return [start] + path[::-1]
        if node in visited: continue
        visited.add(node)
        for neighbor, cost in graph[node]:
            new_g = g + cost
            if neighbor not in g_score or new_g < g_score[neighbor]:
                g_score[neighbor] = new_g
                f_score = new_g + heuristic[neighbor]
                came_from[neighbor] = node
                heapq.heappush(queue, (f_score, new_g, neighbor))
    return "No path found"

# Graph and heuristic example
graph = {
    0: [(1, 1), (2, 2)],
    1: [(3, 3), (4, 10)],
    2: [(5, 5)],
    3: [(5, 1)],
    4: [(5, 2)],
    5: []
}
heuristic = [7, 6, 2, 1, 0, 3]
start, goal = 0, 4

print("Greedy Best-First Search Path:", greedy_search(graph, heuristic, start, goal))
print("A* Search Path:", a_star(graph, heuristic, start, goal))
